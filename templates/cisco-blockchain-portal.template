{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Blockchain Portal Template",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "VPCID",
            "PublicSubnet1ID",
            "PrivateSubnet1ID",
            "RemoteAccessCIDR"
          ]
        },
        {
          "Label": {
            "default": "BlockChain EC2 Configuration"
          },
          "Parameters": [
            "KeyPairName",
            "BlockChainAccessCIDR",
            "InstanceType",
            "PeerHostName",
            "S3BucketName",
            "ESDomainName"
          ]
        },
        {
          "Label": {
            "default": "AWS Quick Start Configuration"
          },
          "Parameters": [
            "QSS3BucketName",
            "QSS3KeyPrefix"
          ]
        }
      ],
      "ParameterLabels": {
        "KeyPairName": {
          "default": "Key Pair Name"
        },
        "PublicSubnet1ID": {
          "default": "Public Subnet 1 ID"
        },
        "PrivateSubnet1ID": {
          "default": "Private Subnet 1 ID"
        },
        "QSS3BucketName": {
          "default": "Quick Start S3 Bucket Name"
        },
        "QSS3KeyPrefix": {
          "default": "Quick Start S3 Key Prefix"
        },
        "RemoteAccessCIDR": {
          "default": "Allowed SSH Access CIDR"
        },
        "BlockChainAccessCIDR": {
          "default": "Allowed Application Access CIDR"
        },
        "PeerHostName": {
          "default": "Peer host name"
        },
        "S3BucketName": {
          "default": "S3 bucket name"
        },
        "ESDomainName": {
          "default": "Elasticsearch Domain name"
        },
        "VPCID": {
          "default": "VPC ID"
        }
      }
    }
  },
  "Parameters": {
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge"
      ],
      "Default": "t2.micro",
      "Description": "Amazon EC2 instance type for the bastion instances",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Enter a Public/private key pair. If you do not have one in this region, please create it before continuing",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "PublicSubnet1ID": {
      "Description": "ID of the public subnet 1 that you want to provision the first bastion into (e.g., subnet-a0246dcd)",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PrivateSubnet1ID": {
      "Description": "ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "QSS3BucketName": {
      "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
      "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Default": "aws-quickstart",
      "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Type": "String"
    },
    "QSS3KeyPrefix": {
      "AllowedPattern": "^[0-9a-zA-Z-/]*$",
      "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Default": "quickstart-cisco-blockchainplatform/",
      "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Type": "String"
    },
    "RemoteAccessCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
      "Description": "Allowed CIDR block for external SSH access",
      "Type": "String"
    },
    "BlockChainAccessCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
      "Description": "Allowed CIDR block for external application access",
      "Type": "String"
    },
    "VPCID": {
      "Description": "ID of the VPC (e.g., vpc-0343606e)",
      "Type": "AWS::EC2::VPC::Id"
    },
    "PeerHostName" : {
      "Description" : "Peer Host name",
      "Type" : "String"
    },
    "S3BucketName" : {
      "Description" : "S3 Bucket name",
      "Type" : "String"
    },
    "ESDomainName" : {
      "Description" : "Elasticsearch Domain name",
      "Type" : "String"
    }
  },
  "Mappings": {
    "AWSAMIRegionMap": {
      "AMI": {
        "US1604HVM": "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180405"
      },
      "us-east-1": {
        "US1604HVM": "ami-097d2494ee8258169"
      }
    }
  },
  "Rules": {
    "SubnetsInVPC": {
      "Assertions": [
        {
          "Assert": {
            "Fn::EachMemberIn": [
              {
                "Fn::ValueOfAll": [
                  "AWS::EC2::Subnet::Id",
                  "VpcId"
                ]
              },
              {
                "Fn::RefAll": "AWS::EC2::VPC::Id"
              }
            ]
          },
          "AssertDescription": "All subnets must exist in the VPC"
        }
      ]
    }
  },
  "Conditions": {
    "GovCloudCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    }
  },
  "Resources": {
    "AdminPortalSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables SSH Access",
        "VpcId": {
          "Ref": "VPCID"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3000",
            "ToPort": "3000",
            "CidrIp": {
              "Ref": "BlockChainAccessCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8181",
            "ToPort": "8181",
            "CidrIp": {
              "Ref": "BlockChainAccessCIDR"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          }
        ]
      }
    },
    "AdminInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "AdminInstancePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3Policy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      { "Ref": "S3BucketName"}
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      { "Ref": "S3BucketName" },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "AdminInstanceRole"
          }
        ]
      }
    },
    "AdminInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "AdminInstanceRole"
          }
        ]
      }
    },
    "AdminPortal": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "cisco_install": [
              "run_install"
            ]
          },
          "run_install": {
            "files": {
              "/cbp/installer/env": {
                "content": { "Fn::Join" : [ "", [
                    "INSTALL_TARGET=portal\n",
                    "ADMIN_HOST=", { "Fn::GetAtt": [ "AdminPortalELB", "DNSName" ] }, "\n",
                    "SDK_PEER_HOST=", { "Ref" : "PeerHostName" }, "\n",
                    "ELK_ADDRESS=https://", { "Ref": "ESDomainName" }, ":443", "\n",
                    "BUCKET=", { "Ref": "S3BucketName" }, "\n",
                    "AWS_REGION=", { "Ref": "AWS::Region" }, "\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "01_start_install": {
                "command": "echo \"start installation\""
              },
              "02_install_portal": {
                "command": "docker run --name installer -i --volume /cbp/certs:/certs --volume /cbp/installer:/installer --volume /var/run/docker.sock:/var/run/docker.sock --env-file /cbp/installer/env ciscoblockchain/vera_installer"
              },
              "03_end_install": {
                "command": "echo \"done installation\""
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            "US1604HVM"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [
          {
            "Ref": "AdminPortalSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PrivateSubnet1ID"
        },
        "IamInstanceProfile": {
          "Ref": "AdminInstanceProfile"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AdminPortal"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -x\n",
                "function cfn_fail {",
                "\n",
                "cfn-signal -e 1 ",
                "--stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource AdminPortal",
                "\nexit 1\n}",
                "\n",
                "function cfn_success {",
                "\n",
                "cfn-signal -e 0 ",
                "--stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource AdminPortal",
                "\nexit 0\n}",
                "\n",
                "echo \"[Cloning: Load QuickStart Common Utils]\"\n",
                "\n",
                "#Once Repo is public (Use quickstart-linux-utilities submodue)\n",
                "git clone -b develop https://github.com/aws-quickstart/quickstart-linux-utilities.git\n",
                "source /quickstart-linux-utilities/quickstart-cfn-tools.source\n",
                "\n",
                "echo \"[Loaded: Load QuickStart Common Utils]\"\n",
                "\n",
                "echo \"[Update Operating System]\"\n",
                "export QSSTACKNAME=${AWS::StackName}",
                "export QSREGION=${AWS::Region}",
                "qs_update-os || qs_error\n",
                "qs_bootstrap_pip\n",
                "qs_aws-cfn-bootstrap\n",
                "echo \"[INFO]: Bootstrapping Status = $(qs_status)\"\n",
                "cfn-init -v ",
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource AdminPortal",
                " --configsets cisco_install",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# Signal the status from cfn-init\n",
                "[ $(qs_status) == 0 ] && cfn_success || echo cfn_fail",
                "\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "AdminPortalELB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "PublicSubnet1ID"
          }
        ],
        "Type": "network",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AdminPortalNLB"
          }
        ]
      }
    },
    "AdminPortalAPITargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "DependsOn": [
        "AdminPortal"
      ],
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPort": 22,
        "HealthCheckProtocol": "TCP",
        "HealthyThresholdCount": 3,
        "Port": 8181,
        "Protocol": "TCP",
        "UnhealthyThresholdCount": 3,
        "VpcId": {
          "Ref": "VPCID"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AdminPortalAPITargetGroup"
          }
        ],
        "TargetType": "ip",
        "Targets": [
          {
            "Id": {
              "Fn::GetAtt": [
                "AdminPortal",
                "PrivateIp"
              ]
            }
          }
        ]
      }
    },
    "AdminPortalUITargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "DependsOn": [
        "AdminPortal"
      ],
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPort": 22,
        "HealthCheckProtocol": "TCP",
        "HealthyThresholdCount": 3,
        "Port": 3000,
        "Protocol": "TCP",
        "UnhealthyThresholdCount": 3,
        "VpcId": {
          "Ref": "VPCID"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AdminPortalAPITargetGroup"
          }
        ],
        "TargetType": "ip",
        "Targets": [
          {
            "Id": {
              "Fn::GetAtt": [
                "AdminPortal",
                "PrivateIp"
              ]
            }
          }
        ]
      }
    },
    "AdminPortalAPIListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "AdminPortalAPITargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "AdminPortalELB"
        },
        "Port": 8181,
        "Protocol": "TCP"
      }
    },
    "AdminPortalUIListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "AdminPortalUITargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "AdminPortalELB"
        },
        "Port": 3000,
        "Protocol": "TCP"
      }
    }
  },
  "Outputs": {
    "AdminPortalPublicDnsName": {
      "Value": {
        "Fn::GetAtt": [
          "AdminPortalELB",
          "DNSName"
        ]
      },
      "Description": "Public DNS Name for the AdminPortal Instance"
    },
    "AdminPortalURL": {
      "Value": {
        "Fn::Join": [
          "",
          [ "http://",
            { "Fn::GetAtt": ["AdminPortalELB", "DNSName" ] },
            ":3000"
          ]
        ]
      }
    }
  }
}
